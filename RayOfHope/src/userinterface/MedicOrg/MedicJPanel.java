/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package userinterface.MedicOrg;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organizations.MedicOrganization;
import Business.Organizations.Organization;
import Business.Person.Person;
import Business.Person.PersonDirectory;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.MedicalAssistanceWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 * Medic JPanel
 * @author shwetabulchandani
 */
public class MedicJPanel extends javax.swing.JPanel {

    /**
     * Creates new form MedicJPanel
     */
    private JPanel userProcessContainer;
    private MedicOrganization medicorganization;
    private Enterprise enterprise;
    private UserAccount userAccount;
    private EcoSystem business;
    PersonDirectory persondirectory;
    Person person;
    Network network;
    public MedicJPanel(JPanel userProcessContainer, UserAccount account, Organization organization, Enterprise enterprise, EcoSystem business, PersonDirectory persondirectory) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.medicorganization = (MedicOrganization) organization;
        this.enterprise = enterprise;
        this.persondirectory = persondirectory;
        this.userAccount = account;
        this.business = business;
        for (Network net : business.getNetworkCatalog()) {
            for (Enterprise ent : net.getEnterpriseDirectory().getEnterpriseList()) {
                if (ent.equals(enterprise)) {
                    network = net;
                }
            }
        }
        populateRequestTable();
        btnProcess.setEnabled(false);
    }
    
     public void populateRequestTable() {
        DefaultTableModel model = (DefaultTableModel) tblMedic.getModel();
        model.setRowCount(0);
        for (WorkRequest request : medicorganization.getWorkQueue().getWorkRequestList()) {
            business.getWorkQueue().getWorkRequestList();
            if (request instanceof MedicalAssistanceWorkRequest) {
                Object[] row = new Object[model.getColumnCount()];
                row[0] = request;
                row[1] = request.getPersonId();
                row[2] = request.getPersonName();
                row[3] = request.getStatus();
                row[4] = request.getSender().getEmployee().getId();
                row[5] = request.getReceiver() == null ? null : request.getReceiver().getEmployee().getName();
//                String result = ((MedicalAssistanceWorkRequest) request).getTestResult();
//                row[6] = result == null ? "Waiting" : result;
                model.addRow(row);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblDoctorOrganisation = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblMedic = new javax.swing.JTable();
        btnAssignToMe = new javax.swing.JButton();
        btnProcess = new javax.swing.JButton();
        lblImg = new javax.swing.JLabel();

        setBackground(new java.awt.Color(246, 226, 187));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblDoctorOrganisation.setFont(new java.awt.Font("SansSerif", 1, 20)); // NOI18N
        lblDoctorOrganisation.setForeground(new java.awt.Color(71, 52, 58));
        lblDoctorOrganisation.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblDoctorOrganisation.setText("Medic Organization");
        add(lblDoctorOrganisation, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 70, 540, 30));

        tblMedic.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Message", "Person ID", "Person Name", "Status", "Sender", "Receiver"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblMedic);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 170, 970, 210));

        btnAssignToMe.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        btnAssignToMe.setText("Assign To Me");
        btnAssignToMe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssignToMeActionPerformed(evt);
            }
        });
        add(btnAssignToMe, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 430, 170, -1));

        btnProcess.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        btnProcess.setText("Process");
        btnProcess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProcessActionPerformed(evt);
            }
        });
        add(btnProcess, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 430, 130, -1));

        lblImg.setBackground(new java.awt.Color(255, 255, 255));
        lblImg.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        lblImg.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblImg.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/female doc and patients.png"))); // NOI18N
        lblImg.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        add(lblImg, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, 800, 620));
    }// </editor-fold>//GEN-END:initComponents

    private void btnAssignToMeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssignToMeActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblMedic.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a Person from table");
            return;
        }
        MedicalAssistanceWorkRequest request = (MedicalAssistanceWorkRequest) tblMedic.getValueAt(selectedRow, 0);
        if (request.getReceiver() != null) {
            JOptionPane.showMessageDialog(null, "Request already assigned.");
            return;
        }
        if (request.getStatus().equalsIgnoreCase("Under Examination") || request.getStatus().equalsIgnoreCase("Pending") || request.getStatus().equalsIgnoreCase("Medicine Prescribed") || request.getStatus().equalsIgnoreCase("Medical Test Requested")) {
            JOptionPane.showMessageDialog(null, "Request already processed.");
            return;
        } else {
            request.setReceiver(userAccount);
            request.setStatus("Pending");
        }
        populateRequestTable();
        JOptionPane.showMessageDialog(null, "Request has been assigned");
        populateRequestTable();
        btnProcess.setEnabled(true);
        
    }//GEN-LAST:event_btnAssignToMeActionPerformed

    private void btnProcessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProcessActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblMedic.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a person from table before proceeding");
            return;
        }
        MedicalAssistanceWorkRequest request = (MedicalAssistanceWorkRequest) tblMedic.getValueAt(selectedRow, 0);
        if (request.getStatus().equalsIgnoreCase("Medicine Prescribed")) {
            JOptionPane.showMessageDialog(null, "Request already completed.");
            return;
        }
        request.setTestResult("Under Examination");
        for (Person c : persondirectory.getPersonList()) {
            if (c.getPersonId() == request.getPersonId()) {
                person = c;
            }
        }
        AssignPersonJPanel assignedPersonJPanel = new AssignPersonJPanel(userProcessContainer, request, person, userAccount, medicorganization, enterprise, business, persondirectory);
        userProcessContainer.add("AssignedChildJPanel", assignedPersonJPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_btnProcessActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAssignToMe;
    private javax.swing.JButton btnProcess;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblDoctorOrganisation;
    private javax.swing.JLabel lblImg;
    private javax.swing.JTable tblMedic;
    // End of variables declaration//GEN-END:variables
}
